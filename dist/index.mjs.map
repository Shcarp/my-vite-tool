{"version":3,"sources":["../src/node/cli.ts","../src/node/server/index.ts","../src/node/optimizer/index.ts","../src/node/constants.ts","../src/node/optimizer/scanPlugin.ts","../src/node/optimizer/preBundlePlugin.ts","../src/node/utils.ts","../src/node/plugins/esbuild.ts","../src/node/plugins/importAnalysis.ts","../src/node/plugins/resolve.ts","../src/node/plugins/index.ts","../src/node/pluginContainer.ts","../src/node/server/middlewares/indexHtml.ts","../src/node/server/middlewares/transform.ts"],"sourcesContent":["import cac from 'cac';\nimport { startDevServer } from './server';\n\nconst cli = cac();\n\ncli\n    .command(\"[root\", \"Run the development server\")\n    .alias(\"serve\")\n    .alias(\"dev\")\n    .action(async () => {\n//        console.log(\"ÊµãËØïcli!@\");\n        await  startDevServer();\n    })\n\ncli.help();\n\ncli.parse();\n","import connect from 'connect';\n// ÂëΩ‰ª§Ë°åÈ¢úËâ≤Â∑•ÂÖ∑\nimport { blue, green } from \"picocolors\";\nimport { optimizer } from \"../optimizer\";\nimport { Plugin } from \"../plugin\";\nimport { resolvePlugins } from \"../plugins\"\nimport { createPluginContainer, PluginContainer } from \"../pluginContainer\";\nimport { indexHtmlMiddleware } from \"./middlewares/indexHtml\";\nimport {transformMiddleware} from \"./middlewares/transform\";\n\nexport interface ServerContext {\n    root: string,\n    pluginContainer: PluginContainer;\n    app: connect.Server;\n    plugins: Plugin[];\n}\n\nexport async function startDevServer() {\n    const app = connect();\n    const root = process.cwd();\n    const startTime = Date.now();\n    const plugins = resolvePlugins();\n    const pluginContainer = createPluginContainer(plugins);\n\n    const serverContext: ServerContext = {\n        root: process.cwd(),\n        pluginContainer,\n        app,\n        plugins,\n    }\n\n    for (const plugin of plugins) {\n        if (plugin.configureServer) {\n            await plugin.configureServer(serverContext);\n        }\n    }\n\n    app.use(transformMiddleware(serverContext))\n\n    // Â§ÑÁêÜÂÖ•Âè£ HTML ËµÑÊ∫ê\n    app.use(indexHtmlMiddleware(serverContext));\n\n    app.listen(3000, async () => {\n        await optimizer(root)\n        console.log(\n                green(\"üöÄ No-Bundle ÊúçÂä°Â∑≤ÁªèÊàêÂäüÂêØÂä®!\"),\n                `ËÄóÊó∂: ${Date.now() - startTime}ms`\n        )\n        console.log(`> Êú¨Âú∞ËÆøÈóÆË∑ØÂæÑ: ${blue(\"http://localhost:3000\")}`);\n    })\n}","import path from \"path\";\nimport { build } from \"esbuild\";\nimport { green } from \"picocolors\";\nimport { scanPlugin } from \"./scanPlugin\";\nimport { preBundlePlugin } from \"./preBundlePlugin\";\nimport { PRE_BUNDLE_DIR } from \"../constants\";\n\nexport async function optimizer(root: string) {\n    // 1. Á°ÆÂÆöÂÖ•Âè£\n    const entry = path.resolve(root, \"src/main.tsx\");\n    // 2. ‰ªéÂÖ•Âè£Â§ÑÊâ´Êèè‰æùËµñ\n    const deps = new Set<string>();\n    await build({\n        entryPoints: [entry],\n        bundle: true,\n        write: false,\n        plugins: [scanPlugin(deps)]\n    });\n    console.log(\n        `${green(\"ÈúÄË¶ÅÈ¢ÑÊûÑÂª∫ÁöÑ‰æùËµñ\")}:\\n${[...deps]\n        .map(green)\n        .map((item) => `  ${item}`)\n        .join(\"\\n\")}`\n    );\n    // 3. È¢ÑÊûÑÂª∫‰æùËµñ\n    await build({\n        entryPoints: [...deps],\n        write: true,\n        bundle: true,\n        format: 'esm',\n        splitting: true,\n        outdir: path.resolve(root, PRE_BUNDLE_DIR),\n        plugins: [preBundlePlugin(deps)]\n    })\n}","import path from 'path'\n\nexport const EXTERNAL_TYPES = [\n    \"css\",\n    \"less\",\n    \"sass\",\n    \"scss\",\n    \"styl\",\n    \"stylus\",\n    \"pcss\",\n    \"postcss\",\n    \"vue\",\n    \"svelte\",\n    \"marko\",\n    \"astro\",\n    \"png\",\n    \"jpe?g\",\n    \"gif\",\n    \"svg\",\n    \"ico\",\n    \"webp\",\n    \"avif\",\n    ];\n\nexport const BARE_IMPORT_RE = /^[\\w@][^:]/;\n\nexport const PRE_BUNDLE_DIR = path.join(\"node_modules\", \".m-vite\");\n\nexport const DEFAULT_EXTERSIONS = [\".tsx\", \".ts\", \".jsx\", \"js\"];\n\n// src/node/constants.ts\nexport const JS_TYPES_RE = /\\.(?:j|t)sx?$|\\.mjs$/;\nexport const QEURY_RE = /\\?.*$/s;\nexport const HASH_RE = /#.*$/s;","import { Plugin } from \"esbuild\";\nimport { BARE_IMPORT_RE, EXTERNAL_TYPES } from \"../constants\";\n\nexport function scanPlugin(deps: Set<string>): Plugin {\n    return  {\n        name:  \"esbuild:scan-deps\",\n        setup(build) {\n            build.onResolve(\n                {\n                    filter: new RegExp(`\\\\.(${EXTERNAL_TYPES.join(\"|\")})$`)\n                },\n                (resolveInfo) => {\n                    return {\n                        path: resolveInfo.path,\n                        external: true,\n                    }\n                }\n            );\n            build.onResolve(\n                {\n                    filter: BARE_IMPORT_RE,\n                },\n                (resolveInfo) => {\n                    const { path: id } = resolveInfo;\n                    deps.add(id);\n                    return {\n                        path: id,\n                        external: true,\n                    }\n                }\n            )\n        }\n    }\n}\n","import path from 'path';\nimport resolve from \"resolve\";\nimport fs from 'fs-extra';\nimport createDebug from \"debug\";\nimport { Loader, Plugin } from 'esbuild';\n// Áî®Êù•ÂàÜÊûê es Ê®°Âùó import/export ËØ≠Âè•ÁöÑÂ∫ì\nimport { init, parse, ExportSpecifier } from 'es-module-lexer'\nimport  { BARE_IMPORT_RE } from '../constants';\nimport { normalizePath } from '../utils'\n\nconst debug = createDebug('dev')\n\nexport function preBundlePlugin(deps: Set<string>): Plugin {\n    return {\n        name: \"esbuild:pre-bundle\",\n        setup(build) {\n            build.onResolve(\n                {\n                    filter: BARE_IMPORT_RE\n                },\n                (resolveInfo) => {\n                    const { path: id, importer } = resolveInfo\n                    const isEntry = !importer\n                    if (deps.has((id))) {\n                        return isEntry\n                            ? {\n                                path: id,\n                                namespace: \"dep\"\n                            }\n                            : {\n                                path: resolve.sync(id, {basedir: process.cwd()})\n                            }\n                    }\n                }\n            ),\n            build.onLoad(\n                {\n                    filter: /.*/,\n                    namespace: \"dep\",\n                },\n                async (loadInfo) => {\n                    await init;\n                    const id = loadInfo.path;\n                    const root = process.cwd();\n                    const entryPath = normalizePath(resolve.sync(id, {basedir: root}));\n                    const code = await fs.readFile(entryPath, \"utf8\");\n                    const [ imports, exports ] = await parse(code);\n                    let proxyModule = [];\n                    if (!imports.length && !exports.length) {\n                        // ÊãøÂà∞ÂØºÂá∫ÂØπË±°\n                        const res = require(entryPath);\n                        // ÊãøÂà∞ÊâÄÊúâÂÖ∑ÂêçÂØºÂá∫\n                        const specifiers = Object.keys(res);\n                        // ÊûÑÈÄ†export ËØ≠Âè•\n                        proxyModule.push(\n                            `export { ${specifiers.join(\",\")} } from \"${entryPath}\"`,\n                            `export default require(\"${entryPath}\")`\n                        )\n                    }else {\n                        if (exports.includes(\"default\" as unknown as ExportSpecifier)) {\n                            proxyModule.push(`import d from \"${entryPath}\";export default d`);\n                        }\n                        proxyModule.push(`export * from \"${entryPath}\"`);\n                    }\n                    debug(\"‰ª£ÁêÜÊ®°ÂùóÂÜÖÂÆπ: %o\", proxyModule.join(\"\\n\"));\n                    const loader = path.extname(entryPath).slice(1);\n                    return {\n                        loader: loader as Loader,\n                        contents: proxyModule.join(\"\\n\"),\n                        resolveDir: root,\n                    }\n                }\n            )\n        }\n    }\n}\n\n","import os from 'os';\nimport path from 'path'\nimport { JS_TYPES_RE, HASH_RE, QEURY_RE} from './constants'\n\nexport function slash(p: string): string {\n    return p.replace(/\\\\/g, \"/\")\n}\n\nexport const isWindows = os.platform() === 'win32';\n\nexport function normalizePath(id: string): string {\n    return path.posix.normalize(isWindows ? slash(id) : id);\n}\n\nexport const isJSRequest = (id: string): boolean => {\n    id = cleanUrl(id);\n    if (JS_TYPES_RE.test(id)) {\n        return true;\n    }\n    if (!path.extname(id) && !id.endsWith(\"/\")) {\n        return true;\n    }\n    return false;\n};\n\nexport const cleanUrl = (url: string): string =>\nurl.replace(HASH_RE, \"\").replace(QEURY_RE, \"\");\n","import { readFile } from \"fs-extra\";\nimport { Plugin } from \"../plugin\";\nimport { isJSRequest } from \"../utils\";\nimport esbuild from \"esbuild\";\nimport path from \"path\";\n\nexport function esbuildTransformPlugin(): Plugin {\n    return {\n        name: \"m-vite:esbuild-transform\",\n        async load(id) {\n            if (isJSRequest(id)) {\n                try {\n                    return await readFile(id, 'utf8');\n                }catch (e) {\n                    return null;\n                }\n            }\n        },\n        async transform(code, id) {\n            if (isJSRequest(id)) {\n                const extname = path.extname(id).slice(1);\n                const { code: transformedCode, map } = await esbuild.transform(code, {\n                    target: \"esnext\",\n                    format: \"esm\",\n                    sourcemap: true,\n                    loader: extname as \"js\" | \"ts\" | \"jsx\" | \"tsx\",\n                });\n                return {\n                    code: transformedCode,\n                    map,\n                };\n            }\n            return  null;\n        }\n    }\n}\n","// Êñ∞Âª∫ src/node/plugins/importAnalysis.ts\nimport { init, parse } from \"es-module-lexer\";\nimport {\n    BARE_IMPORT_RE,\n    DEFAULT_EXTERSIONS,\n    PRE_BUNDLE_DIR,\n} from \"../constants\";\nimport {\n    cleanUrl,\n    isJSRequest,\n    normalizePath\n} from \"../utils\";\n// magic-string Áî®Êù•‰ΩúÂ≠óÁ¨¶‰∏≤ÁºñËæë\nimport MagicString from \"magic-string\";\nimport path from \"path\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server/index\";\nimport { pathExists } from \"fs-extra\";\nimport resolve from \"resolve\";\n\n\nexport function importAnalysisPlugin(): Plugin {\n    let serverContext: ServerContext;\n    return {\n        name: \"m-vite:import-analysis\",\n        configureServer(s) {\n            serverContext = s;\n        },\n        async transform(code: string, id: string) {\n            if (!isJSRequest(id)) {\n                return null;\n            }\n            await init;\n\n            const [imports] = parse(code);\n            const ms = new MagicString(code);\n            for (const importInfo of imports) {\n                const { s: modStart, e: modEnd, n: modSource } = importInfo;\n                if (!modSource) continue;\n                // Á¨¨3ÊñπÂ∫ì ÈáçÂÜôÂà∞È¢ÑÊûÑÂª∫‰∫ßÁâ©\n                if (BARE_IMPORT_RE.test(modSource)) {\n                    const bundlePath = normalizePath(\n                        path.join('/', PRE_BUNDLE_DIR, `${modSource}.js`)\n                    );\n                    ms.overwrite(modStart, modEnd, bundlePath)\n                }else if(modSource.startsWith(\".\") || modSource.startsWith(\"/\")) {\n                    // Ë∞ÉÁî®‰∏ä‰∏ãÊñáÁöÑresolve\n                    const resolved = await this.resolve(modSource, id);\n                    if (resolved) {\n                        ms.overwrite(modStart, modEnd, resolved.id);\n                    }\n                }\n            }\n            return {\n                code: ms.toString(),\n                map: ms.generateMap()\n            }\n        }\n    }\n}\n","import resolve from \"resolve\";\nimport { Plugin } from \"../plugin\";\nimport { ServerContext } from \"../server/index\";\nimport path from \"path\";\nimport { pathExists } from \"fs-extra\";\nimport { DEFAULT_EXTERSIONS } from \"../constants\";\nimport { cleanUrl, normalizePath } from \"../utils\";\n\nexport function resolvePlugin(): Plugin {\n    let serverContext: ServerContext;\n    return {\n        name: \"m-vite:resolve\",\n        configureServer(s) {\n            serverContext = s;\n        },\n        async resolveId(id: string, importer?: string) {\n            // ÁªùÂØπË∑ØÂæÑ\n            if (path.isAbsolute(id)) {\n                if (await pathExists(id)) {\n                    return { id };\n                }\n                id = path.join(serverContext.root, id);\n                if (await pathExists(id)) {\n                    return { id };\n                }\n            }\n            // Áõ∏ÂØπË∑ØÂæÑ\n            else if (id.startsWith(\".\")) {\n                if (!importer) {\n                    throw new Error(\"`importer` should not be undefined\");\n                }\n                const hasExtension = path.extname(id).length > 1;\n                let resolvedId: string;\n                // ÊúâÊâ©Â±ï\n                if (hasExtension) {\n                    resolvedId = normalizePath(resolve.sync(id, {basedir: path.dirname(importer)}));\n                    if (await pathExists(resolvedId)) {\n                        return {id}\n                    }\n                }\n                // Êó†Êâ©Â±ï\n                else {\n                    // Âä†‰∏äÊâ©Â±ï ‰∏Ä‰∏™‰∏Ä‰∏™Â∞ùËØï\n                    for (const extname of DEFAULT_EXTERSIONS) {\n                        try {\n                            const withExtension = `${id}${extname}`;\n                            resolvedId = normalizePath(resolve.sync(withExtension, {\n                                basedir: path.dirname(importer),\n                            }));\n//                            console.log(withExtension, \"kdasdasdaskj\")\n                            if (await pathExists(resolvedId)) {\n                                return { id: withExtension };\n                            }\n                        }catch (e) {\n                            continue;\n                        }\n                    }\n                }\n            }\n            return null;\n        }\n    }\n}","// src/node/plugin/index.ts\nimport { esbuildTransformPlugin } from \"./esbuild\";\nimport { importAnalysisPlugin } from \"./importAnalysis\";\nimport { resolvePlugin } from \"./resolve\";\nimport { Plugin } from \"../plugin\";\n\nexport function resolvePlugins(): Plugin[] {\n    return [resolvePlugin(), esbuildTransformPlugin(), importAnalysisPlugin()];\n}\n","import type {\n    LoadResult,\n    PartialResolvedId,\n    SourceDescription,\n    PluginContext as RollupPluginContext,\n    ResolvedId,\n} from \"rollup\"\nimport { Plugin } from \"./plugin\";\n\nexport interface PluginContainer {\n    resolveId(id: string, importer?: string): Promise<PartialResolvedId | null>;\n    load(id: string): Promise<LoadResult | null>;\n    transform(code: string, id: string): Promise<SourceDescription | null>;\n}\n\nexport const createPluginContainer = (plugins: Plugin[]): PluginContainer => {\n    // @ts-ignore ËøôÈáå‰ªÖÂÆûÁé∞‰∏ä‰∏ãÊñáÂØπË±°ÁöÑ resolve ÊñπÊ≥ï\n    class Context implements RollupPluginContext {\n        async resolve(id: string, importer?: string) {\n            let out = await pluginContainer.resolveId(id, importer);\n            if (typeof out === \"string\") out = {id: out};\n            return out as ResolvedId | null\n        }\n    }\n    const pluginContainer: PluginContainer = {\n        async resolveId(id: string, importer?: string) {\n            const ctx = new Context() as any\n            for (const plugin of plugins) {\n                if (plugin.resolveId) {\n                    const newId = await plugin.resolveId.call(ctx as any, id, importer);\n                    if (newId) {\n                        id = typeof newId === 'string' ? newId : newId.id;\n                        return { id };\n                    }\n                }\n            }\n            return  null\n        },\n        async load(id) {\n            const ctx = new Context() as any\n            for (const plugin of plugins) {\n                if (plugin.load) {\n                    const result = await plugin.load.call(ctx, id);\n                    if (result) {\n                        return result;\n                    }\n                }\n            }\n            return null;\n        },\n        async transform(code, id) {\n            const ctx = new Context() as any;\n            for (const plugin of plugins) {\n                if (plugin.transform) {\n                    const result = await plugin.transform.call(ctx, code, id);\n                    if (!result) continue;\n                    if (typeof result === 'string') {\n                        code = result;\n                    }else if (result.code) {\n                        code = result.code\n                    }\n                }\n            }\n            return { code }\n        }\n    }\n    return  pluginContainer;\n}\n","import { NextHandleFunction } from \"connect\";\nimport { ServerContext } from \"../index\";\nimport path from \"path\";\nimport { pathExists, readFile } from \"fs-extra\";\n\nexport function indexHtmlMiddleware(\n    serverContext: ServerContext\n): NextHandleFunction {\n    return async (req, res, next) => {\n        if (req.url === '/') {\n            const { root } = serverContext;\n            const indexHtmlPath = path.join(root, \"index.html\");\n            if (await pathExists(indexHtmlPath)) {\n                const rawHtml = await readFile(indexHtmlPath, 'utf8');\n                let html = rawHtml;\n                for (const plugin of serverContext.plugins) {\n                    if (plugin.transformIndexHtml) {\n                        html = await plugin.transformIndexHtml(html);\n                    }\n                }\n                res.statusCode = 200;\n                res.setHeader(\"Content-Type\", \"text/html\");\n                return res.end(html);\n            }\n        }\n        return next();\n    }\n}\n","import { NextHandleFunction } from \"connect\";\n\nimport { ServerContext } from \"../index\";\nimport createDebug from \"debug\";\nimport {isJSRequest} from \"../../utils\";\n\nconst debug = createDebug(\"dev\");\n\n// ÂØπËØ∑Ê±Ç‰æùÊ¨°Ë∞ÉÁî® resolveId load transformÊñπÊ≥ï\nexport async function transformRequest(\n    url: string,\n    serverContext: ServerContext\n) {\n    const { pluginContainer } = serverContext;\n    // Ë∞ÉÁî®resolveId\n    const resolveResult = await pluginContainer.resolveId(url);\n    let transformResult;\n    if (resolveResult?.id) {\n        // Ë∞ÉÁî® load\n        let code = await pluginContainer.load(resolveResult.id);\n        if (typeof code === 'object' && code !== null) {\n            code = code.code;\n        }\n        if (code) {\n            transformResult = await pluginContainer.transform(\n                code as string,\n                resolveResult?.id\n            )\n        }\n    }\n    return transformResult;\n}\n\nexport function transformMiddleware(\n    serverContext: ServerContext\n): NextHandleFunction {\n    return async (req, res, next) => {\n        if (req.method !== \"GET\" && !req.url) {\n            return next()\n        }\n        const url = req.url;\n        debug(\"transformMiddleware: %s\", url);\n        if(isJSRequest(url)) {\n            let result = await transformRequest(url, serverContext);\n            if (!result) {\n                return next();\n            }\n            if (result && typeof result !== \"string\") {\n                result = result.code;\n            }\n            res.statusCode = 200;\n            res.setHeader(\"Content-Type\", \"application/javascript\");\n            return res.end(result);\n        }\n        next();\n    }\n}\n"],"mappings":"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","names":["green","path","build","path","path","path","build","path","path","path","init","parse","path","init","parse","resolve","path","path","resolve","path","pathExists","readFile","createDebug","debug","createDebug","green"]}